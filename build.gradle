/*
 * web: build.gradle
 * XNAT http://www.xnat.org
 * Copyright (c) 2005-2017, Washington University School of Medicine and Howard Hughes Medical Institute
 * All Rights Reserved
 *  
 * Released under the Simplified BSD.
 */

import com.github.kongchen.swagger.docgen.mavenplugin.ApiSource
import com.github.zhurlik.SwaggerTask
import io.swagger.models.Contact
import io.swagger.models.Info
import io.swagger.models.License
import org.gradle.internal.jvm.Jvm

buildscript {
    ext {
        vXnat = "1.7.5-SNAPSHOT"
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-release"
            name "XNAT Release Repository"
        }
        maven {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot"
            name "XNAT Snapshot Repository"
        }
    }
    dependencies {
        classpath "com.bmuschko:gradle-cargo-plugin:2.2.3"
        classpath "com.bmuschko:gradle-tomcat-plugin:2.3"
        classpath "com.github.kongchen:swagger-maven-plugin:3.1.+"
        classpath "gradle.plugin.com.github.zhurlik:gradle-swagger-plugin:0.2"
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.8.0"
        classpath "io.franzbecker:gradle-lombok:1.10"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "io.swagger:swagger-core:1.5.+"
        classpath "org.nrg.xnat:xnat-data-models:1.7.5-SNAPSHOT"
        classpath "org.springframework:spring-jdbc:4.3.10.RELEASE"
        classpath "org.springframework:spring-webmvc:4.3.10.RELEASE"
    }
}

group "org.nrg.xnat"
version = vXnat

apply plugin: "com.github.zhurlik.swagger"
apply plugin: "com.palantir.git-version"
apply plugin: "com.bmuschko.cargo"
apply plugin: "com.bmuschko.tomcat"
apply plugin: "eclipse"
apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"
apply plugin: "java"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "war"

repositories {
    mavenLocal()
    maven {
        url "http://dcm4che.org/maven2"
        name "dcm4che Maven Repository"
    }
    jcenter()
    mavenCentral()
    maven {
        url "https://nrgxnat.jfrog.io/nrgxnat/libs-release"
        name "XNAT Release Repository"
    }
    maven {
        url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot"
        name "XNAT Snapshot Repository"
    }
    maven {
        url "https://nrgxnat.jfrog.io/nrgxnat/ext-release"
        name "XNAT External Release Repository"
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

def javaVersion = Jvm.current().javaVersion
if (javaVersion.java8Compatible || javaVersion.java9Compatible) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption("Xdoclint:none", "-quiet")
        }
    }

    if (hasProperty("rt.17.jar")) {
        // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
        // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
        def rt17jar = property "rt.17.jar"
        logger.info "Using ${rt17jar} as the bootstrap class path jar."
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.fork = true
                options.compilerArgs << "-XDignore.symbol.file"
                options.bootClasspath = rt17jar as String
            }
        }
    } else {
        logger.warn "No value was set for the rt.17.jar build property, but you are using a Java 8- or 9-compatible JDK. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
        logger.warn "\n"
        logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
        logger.warn "\n"
        logger.warn "You can also set this property in a gradle.properties file, either in the top level of your build folder or in the folder ~/.gradle/:\n"
        logger.warn "\n"
        logger.warn "  rt.17.jar=/home/developer/.gradle/rt.17.jar\n"
        logger.warn "\n"
        logger.warn "In some isolated instances, using a bootstrap library from a JDK version later than 1.7 can result in run-time errors.\n"
    }
} else if (!javaVersion.java7Compatible) {
    throw new BuildCancelledException("You are using a JDK version (${javaVersion}) that is not compatible with Java 7. The XNAT build will fail. Please install a JDK version of Java 7 or later.")
}

if (hasProperty("archiveName")) {
    war.archiveName = archiveName.endsWith(".war") ? archiveName : "${archiveName}.war"
} else {
    war.baseName = "xnat-web"
}

configurations {
    javadocCoverage

    all*.exclude group: "ant", module: "ant"
    all*.exclude group: "avalon-logkit"
    all*.exclude group: "berkeleydb"
    all*.exclude group: "com.github.jai-imageio"
    all*.exclude group: "com.metaparadigm"
    all*.exclude group: "com.sun.jdmk", module: "jmxtools"
    all*.exclude group: "com.sun.jmx", module: "jmxri"
    all*.exclude group: "commons-beanutils", module: "commons-beanutils-core"
    all*.exclude group: "commons-betwixt"
    all*.exclude group: "commons-dbcp"
    all*.exclude group: "commons-email"
    all*.exclude group: "commons-messenger"
    all*.exclude group: "commons-pool"
    all*.exclude group: "edu.ucar", module: "netcdf"
    all*.exclude group: "excalibur-component"
    all*.exclude group: "excalibur-instrument"
    all*.exclude group: "excalibur-logger"
    all*.exclude group: "excalibur-pool"
    all*.exclude group: "fulcrum"
    all*.exclude group: "geronimo-spec"
    all*.exclude group: "hsqldb"
    all*.exclude group: "imagej"
    all*.exclude group: "jakarta-regexp"
    all*.exclude group: "jamon"
    all*.exclude group: "javax.jms", module: "jms"
    all*.exclude group: "javax.mail", module: "mail"
    all*.exclude group: "javax.servlet", module: "servlet-api"
    all*.exclude group: "javax.sql", module: "jdbc-stdext"
    all*.exclude group: "javax.transaction", module: "jta"
    all*.exclude group: "jdbc", module: "jdbc"
    all*.exclude group: "jmock"
    all*.exclude group: "jms", module: "jms"
    all*.exclude group: "jndi"
    all*.exclude group: "jython"
    all*.exclude group: "mockobjects"
    all*.exclude group: "mysql"
    all*.exclude group: "net.sf.saxon", module: "Saxon-B"
    all*.exclude group: "net.sf.saxon", module: "saxon"
    all*.exclude group: "net.sf.saxon", module: "saxon-dom"
    all*.exclude group: "net.sf.saxon", module: "saxon-xpath"
    all*.exclude group: "ojb", module: "ojb"
    all*.exclude group: "org.apache.geronimo.specs"
    all*.exclude group: "org.apache.struts"
    all*.exclude group: "org.nrg", module: "nrg"
    all*.exclude group: "org.nrg", module: "nrgutil"
    all*.exclude group: "org.nrg", module: "plexiviewer"
    all*.exclude group: "org.nrg.xdat", module: "beans"
    all*.exclude group: "org.nrg.xnat", module: "web"
    all*.exclude group: "quartz"
    all*.exclude group: "resources", module: "resources"
    all*.exclude group: "servletapi"
    all*.exclude group: "stax", module: "stax-api"
    all*.exclude group: "tomcat"
    all*.exclude group: "velocity"
    all*.exclude group: "xerces", module: "xmlParserAPIs"
    all*.exclude group: "xml-apis"
    all*.exclude group: "xmlrpc"
    all*.exclude module: "log4j-slf4j-impl"
    all*.exclude module: "pipelineCNDAXNAT"
    all*.exclude module: "slf4j-simple"
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    // NRG dependencies first.
    implementation "org.nrg.xnat:spawner"
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation "org.nrg.xdat:core"
    implementation "org.nrg:framework"
    implementation "org.nrg:transaction"
    implementation "org.nrg:prefs"
    implementation "org.nrg:config"
    implementation "org.nrg:automation"
    implementation "org.nrg:dicomtools"
    implementation "org.nrg.dicom:dicom-edit4"
    implementation "org.nrg.dicom:dicom-edit6"
    implementation "org.nrg:mail"
    implementation "org.nrg:notify"

    implementation "org.nrg:dicom-xnat-mx"
    implementation "org.nrg:dicom-xnat-sop"
    implementation "org.nrg:dicom-xnat-util"
    implementation "org.nrg:ecat4xnat"
    implementation "org.nrg:ExtAttr"
    implementation "org.nrg:DicomImageUtils"
    implementation "org.nrg:PrearcImporter"
    implementation "org.nrg:SessionBuilders"

    compile("org.nrg.xnat:plexiviewer") {
        transitive = false
    }

    implementation "org.nrg:pipelineBase"
    implementation "org.nrg:pipelineBuild"
    implementation "org.nrg:pipelineWorkflow"
    implementation "org.nrg:pipelineXNAT"
    implementation "org.nrg.xnat.pipeline:client"
    implementation "org.nrg.xnat.pipeline:xnat_pipeline"
    implementation "org.nrg.xnat.pipeline:xnat_tools"

    implementation "dcm4che:dcm4che-core"
    implementation "dcm4che:dcm4che-image"
    implementation "dcm4che:dcm4che-imageio"
    implementation "dcm4che:dcm4che-imageio-rle"
    implementation "dcm4che:dcm4che-iod"
    implementation "dcm4che:dcm4che-net"

    implementation "org.springframework:spring-aop"
    implementation "org.springframework:spring-beans"
    implementation "org.springframework:spring-context-support"
    implementation "org.springframework:spring-context"
    implementation "org.springframework:spring-core"
    implementation "org.springframework:spring-jdbc"
    implementation "org.springframework:spring-jms"
    implementation "org.springframework:spring-messaging"
    implementation "org.springframework:spring-orm"
    implementation "org.springframework:spring-oxm"
    implementation "org.springframework:spring-tx"
    implementation "org.springframework:spring-web"
    implementation "org.springframework:spring-webmvc"

    implementation "io.springfox:springfox-swagger2"
    implementation "io.springfox:springfox-swagger-ui"

    implementation "org.springframework.security:spring-security-acl"
    implementation "org.springframework.security:spring-security-aspects"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-ldap"
    implementation "org.springframework.security:spring-security-taglibs"
    implementation "org.springframework.ldap:spring-ldap-core"

    implementation "org.hibernate:hibernate-core"
    implementation "org.hibernate:hibernate-ehcache"
    implementation "org.hibernate:hibernate-validator"
    implementation "org.hibernate:hibernate-envers"
    implementation "net.sf.ehcache:ehcache-core"
    implementation "com.marvinformatics.hibernate:hibernate-native-json"

    implementation "org.aspectj:aspectjweaver"
    implementation "org.aspectj:aspectjrt"

    implementation "com.noelios.restlet:com.noelios.restlet"
    implementation "com.noelios.restlet:com.noelios.restlet.ext.servlet"
    implementation "org.restlet:org.restlet.ext.fileupload"

    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-guava"
    implementation "org.json:json"
    implementation "com.thoughtworks.xstream:xstream"
    implementation "xerces:xercesImpl"

    implementation "commons-beanutils:commons-beanutils"
    implementation "commons-codec:commons-codec"
    implementation "commons-collections:commons-collections"
    implementation "commons-configuration:commons-configuration"
    implementation "commons-digester:commons-digester"
    implementation "commons-discovery:commons-discovery"
    implementation "commons-fileupload:commons-fileupload"
    implementation "commons-net:commons-net"

    implementation "org.apache.commons:commons-configuration2"
    implementation "org.apache.commons:commons-math"

    implementation "org.apache.httpcomponents:httpclient"
    implementation "org.apache.httpcomponents:httpcore"
    implementation "org.apache.httpcomponents:httpcore-nio"

    implementation "org.codehaus.groovy:groovy-all"
    implementation "org.python:jython-standalone"

    implementation "net.sourceforge.saxon:saxon"
    implementation "xalan:xalan"

    implementation "eu.bitwalker:UserAgentUtils"
    implementation "com.twmacinta:fast-md5"
    implementation "com.h2database:h2"
    implementation "com.lowagie:itext"
    implementation "net.java.dev.msv:msv-core"
    implementation "gnu.getopt:java-getopt"
    implementation "org.quartz-scheduler:quartz"
    implementation "org.reflections:reflections"
    implementation "org.apache.xmlbeans:xmlbeans"
    implementation "org.apache.xmlbeans:xmlbeans-xpath"
    implementation "org.apache.xbean:xbean-spring"
    implementation "net.java.dev.msv:xsdlib"

    implementation "org.postgresql:postgresql"

    implementation "org.slf4j:slf4j-api"
    implementation "org.slf4j:slf4j-log4j12"
    implementation "org.slf4j:jul-to-slf4j"
    implementation "log4j:log4j"
    implementation "javax.servlet:jstl"
    implementation "com.google.code.gson:gson"
    implementation "com.google.guava:guava"

    runtimeOnly "org.nrg.xnatx.plugins:ximgview-plugin"
    runtimeOnly "org.apache.activemq:activemq-core"
    runtimeOnly "org.apache.ant:ant"
    runtimeOnly "axis:axis-ant"
    runtimeOnly "axis:axis-schema"
    runtimeOnly "cglib:cglib"
    runtimeOnly "org.hsqldb:hsqldb"
    runtimeOnly "org.codehaus.groovy.modules.http-builder:http-builder"
    runtimeOnly "net.imagej:ij"
    runtimeOnly "com.sun.media:jai_imageio"
    runtimeOnly "net.bull.javamelody:javamelody-core"
    runtimeOnly "org.javassist:javassist"

    providedCompile "javax.servlet:javax.servlet-api"

    tomcat "org.apache.tomcat.embed:tomcat-embed-core",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli",
            "org.apache.tomcat.embed:tomcat-embed-jasper"

    cargo "org.codehaus.cargo:cargo-core-uberjar",
            "org.codehaus.cargo:cargo-ant"

    testCompile "org.nrg:test"
    testCompile "junit:junit"
    testCompile "org.springframework:spring-test"

    javadocCoverage "com.manoelcampos:javadoc-coverage"
}

tomcatRun.contextPath = "/"
tomcatRunWar.contextPath = "/"

[tomcatRun, tomcatRunWar].each { task ->
    // TODO: This can be configured with an external folder reference to be used for loading XNAT modules.
    task.additionalRuntimeResources << file("/Users/rherrick/xnat/config/plugins")
}

task deployToTomcat(type: Copy, dependsOn: war) {
    from war.archivePath
    into "${propertyWithDefault("tomcatHome", ".")}/webapps"
}

cargo {
    // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command line in
    // the form -PdeployPort=8080 -PdeployContext=/ -PdeployHost=localhost -PdeployUser=deploy -PdeployPassword=deploy
    containerId = "tomcat7x"
    port = propertyWithDefault("deployPort", 8080) as int

    deployable {
        context = propertyWithDefault("deployContext", "/")
    }

    remote {
        hostname = propertyWithDefault("deployHost", "localhost")
        username = propertyWithDefault("deployUser", "deploy")
        password = propertyWithDefault("deployPassword", "deploy")
    }
}

// Pulls in the Jenkins BUILD_NUMBER environment variable if available.
def buildDate = new Date()
def buildNumber = System.getenv().BUILD_NUMBER?.toInteger() ?: "Manual"
def revision = gitVersion().replace("${version}-", "")

logger.info "Git version:            ${gitVersion()}"
logger.info "Build-Date:             ${buildDate}"
logger.info "Build-Number:           ${buildNumber}"
logger.info "Implementation-Sha:     ${revision}"
logger.info "Implementation-Version: ${version}"

jar {
    manifest {
        attributes "Application-Name": "XNAT",
                "Build-Date": buildDate,
                "Build-Number": buildNumber,
                "Implementation-Sha": revision,
                "Implementation-Version": version
    }
}

war {
    manifest {
        attributes "Application-Name": "XNAT",
                "Build-Date": buildDate,
                "Build-Number": buildNumber,
                "Implementation-Sha": revision,
                "Implementation-Version": version
    }
}

jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"]
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

task swagger(type: SwaggerTask, dependsOn: classes) {

    // any dirs with classes
    classesDirs = [
            file("${buildDir}/classes/java/main")
    ]

    apiSources = [
            new ApiSource(
                    springmvc: true,
                    locations: ["org.nrg.xapi.rest"],
                    schemes: ["http", "https"],
                    host: "xnat.org",
                    basePath: "/xapi",
                    info: new Info(
                            title: "XNAT REST API",
                            version: "${version}",
                            description: "REST API for the XNAT server",
                            contact: new Contact(
                                    email: "info@xnat.org",
                                    name: "XNAT",
                                    url: "http://www.xnat.org"
                            ),
                            license: new License(
                                    url: "https://opensource.org/licenses/BSD-2-Clause",
                                    name: "Simplified 2-Clause BSD"
                            )
                    ),
                    outputPath: file("${buildDir}/docs").path,
                    outputFormats: "json,yaml",
                    swaggerDirectory: file("${buildDir}/docs").path,
                    swaggerFileName: "${project.group}.${project.name}-${project.version}-swagger"
            )
    ]
}

task javadocCoverageReport(type: Javadoc, dependsOn: javadoc) {
    source = sourceSets.main.allJava
    destinationDir = reporting.file("javadoc")
    options.docletpath = configurations.javadocCoverage.files.asType(List)
    options.doclet = "com.manoelcampos.javadoc.coverage.CoverageDoclet"
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: [javadocCoverageReport, swagger]) {
    classifier "javadoc"
    from javadoc.destinationDir
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        artifacts {
            artifact sourceJar
            artifact javadocJar
        }

        pom.withXml {
            def root = asNode()
            root.appendNode("name", "XNAT Server")
            root.appendNode("description", "XNAT is an open-source imaging informatics software platform dedicated to helping you perform imaging-based research. XNAT’s core functions manage importing, archiving, processing and securely distributing imaging and related study data. But its extended uses continue to evolve.")
            root.appendNode("url", "https://bitbucket.org/xnatdev/xnat-web")
            root.appendNode("inceptionYear", "2016")

            def scm = root.appendNode("scm")
            scm.appendNode("url", "https://bitbucket.org/xnatdev/xnat-web")
            scm.appendNode("connection", "scm:https://bitbucket.org/xnatdev/xnat-web.git")
            scm.appendNode("developerConnection", "scm:git://bitbucket.org/xnatdev/xnat-web.git")

            def license = root.appendNode("licenses").appendNode("license")
            license.appendNode("name", "Simplified BSD 2-Clause License")
            license.appendNode("url", "http://xnat.org/about/license.php")
            license.appendNode("distribution", "repo")

            def developers = root.appendNode("developers")
            def rherrick = developers.appendNode("developer")
            rherrick.appendNode("id", "rherrick")
            rherrick.appendNode("name", "Rick Herrick")
            rherrick.appendNode("email", "jrherrick@wustl.edu")
        }
    }
}
publishing.repositories {
    maven {
        credentials {
            // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
            // line in the form -PrepoUsername=foo -PrepoPassword=bar.
            username propertyWithDefault("repoUsername", "username")
            password propertyWithDefault("repoPassword", "password")
        }
        url project.version.endsWith("-SNAPSHOT") ? "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local" : "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
    }
}

def propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}
