# project settings tabs

root:
    kind: tabs
    groups:
        projectAdmin: Project Administration
    contents:
        ${projectSettingsJS}
        ${quarantine}
        ${prearchive}
        ${projectAnon}
        ${seriesImport}
        ${PETTracers}
        ${dicomPETMR}
        ${notifications}
        ${scanType}
        ${projectSettingsInit}

# define tabs

quarantine:
    show: "{{XNAT.data.siteConfig.uiAllowQuarantine}}"  # render depending on the value of this variable
    kind: tab
    label: Quarantine
    group: projectAdmin
    contents:
        ${quarantineSettings}

prearchive:
    show: "{{XNAT.data.siteConfig.projectAllowAutoArchive}}"  # render depending on the value of this variable
    kind: tab
    label: Prearchive
    group: projectAdmin
    contents:
        ${prearchiveSettings}

projectAnon:
    kind: tab
    label: Anonymization
    group: projectAdmin
    contents:
        ${projectAnonForm}

seriesImport:
    kind: tab
    label: Series Import Filters
    group: projectAdmin
    contents:
        ${seriesImportForm}

eventHandlers:
    kind: tab
    label: Event Handlers
    group: projectAdmin
    contents:
        ${eventHandlerSetup}

projectResources:
    kind: tab
    label: Project Resource Settings
    group: projectAdmin
    contents:
        ${projectResourceSettings}

PETTracers:
    kind: tab
    label: PET Tracers
    group: projectAdmin
    contents:
        ${PETTracersForm}

dicomPETMR:
    kind: tab
    label: DICOM PET/MR
    group: projectAdmin
    contents:
        ${dicomConfig}

notifications:
    kind: tab
    label: Notifications
    group: projectAdmin
    contents:
        ${notificationsConfig}

scanType:
    kind: tab
    label: Scan Type Mapping
    group: projectAdmin
    contents:
        ${scanTypeMapping}



quarantineSettings:
    kind: panel.form
    id: quarantine-settings
    label: Define Quarantine Settings
    reload: true
    load: "~/data/projects/{{XNAT.data.context.project}}/quarantine_code > [[quarantine]]"
    action: "~/data/projects/{{XNAT.data.context.project}}/quarantine_code/[[quarantine]]?XNAT_CSRF={{csrfToken}}"
    contentType: text/plain
    method: PUT
    contents:
        quarantineRadios:
            kind: input.radioGroup
            name: quarantine
            options:
                yes:
                    label: "Yes"
                    value: "1"
                    description: >
                        All new experiments (and modified experiments) are quarantined and must be specifically activated.
                no:
                    label: "No"
                    value: "0"
                    description: >
                        New and modified experiments will not be quarantined.


prearchiveSettings:
    kind: panel.form
    id: prearchive-settings
    label: Define Prearchive Settings
    reload: true
    load: "~/data/projects/{{XNAT.data.context.project}}/prearchive_code > [[prearchive]]"
    action: "~/data/projects/{{XNAT.data.context.project}}/prearchive_code/[[prearchive]]?XNAT_CSRF={{csrfToken}}"
    contentType: text/plain
    method: PUT
    contents:
        prearchiveRadios:
            kind: input.radioGroup
            name: prearchive
            options:
                prearc0:
                    id: prearchive-0
                    value: "0"
                    label: ""
                    description: >
                        All image data should be placed in a temporary location (prearchive) before being
                        manually transferred into the permanent archive.
                prearc4:
                    id: prearchive-4
                    value: "4"
                    label: ""
                    description: >
                        All image data will be placed into the archive automatically, but anything matching
                        existing files will be rejected. Data which doesn't match a pre-existing project will
                        be placed in an 'Unassigned' project.
                prearc5:
                    id: prearchive-5
                    value: "5"
                    label: ""
                    description: >
                        All image data will be placed into the archive automatically and will overwrite existing files.
                        Data which doesn't match a pre-existing project will be placed in an 'Unassigned' project.


dicomConfig:
    kind: panel.form
    id: dicom-separate-petmr
    label: DICOM Configuration
    reload: true
    _load: "~/data/projects/{{XNAT.data.context.project}}/config/separatePETMR/config > [[separatePETMR]]"
    load: "#?:XNAT.app.projectSettings.getDicomConfig()"
    action: "#?:XNAT.app.projectSettings.setDicomConfig()"
    _contentType: "text/plain"
    _method: PUT
    contents:
        separatePETMR:
            kind: panel.select.single
            name: separatePETMR
            id: dicom-petmr-menu
            label: "Separate PET-MR?"
            description: >
                Should data generated by PET-MR scanners be created as a single PET/MR imaging session,
                created as a single PET imaging session, or separated into PET and MR sessions?
            options:
                system: "Use the system default"
                petmr: "Create as PET/MR session"
                pet: "Create as PET session"
                separate: "Separate into PET and MR sessions"


scanTypeMapping:
    kind: panel.form
    id: scan-type-mapping
    label: Define Scan Type Mapping
    reset: ""
    load: "~/data/projects/{{XNAT.data.context.project}}/config/project/scanTypeMapping?contents=true > [[scan_type_mapping]]"
    action: "~/data/projects/{{XNAT.data.context.project}}/scan_type_mapping/[[scan_type_mapping]]?XNAT_CSRF={{csrfToken}}"
    contentType: "text/plain"
    method: PUT
    contents:
        scan_type_mapping:
            kind: input.radioGroup
            name: scan_type_mapping
            id: scan-type-mapping-radios
            options:
                yes:
                    label: "Yes"
                    value: "true"
                    description: >
                        Incoming scans will have their type attribute set based on historical scan type mapping data.
                no:
                    label: "No"
                    value: "false"
                    description: >
                        Incoming scans will have their type attribute set to be identical to their series description.


PETTracersForm:
    kind: panel.form
    id: pet-tracers-form
    label: PET Tracers
    load: "#?:XNAT.app.projectSettings.getPetTracers()"
    action: "#?:XNAT.app.projectSettings.setPetTracers()"
    method: PUT
    contents:
        enableTracers:
            kind: panel.input.switchbox
            name: status
            id: enable-pet-tracers
            label: Enable Project PET Tracers
            values: "enabled|disabled"
            onText: PET Tracers Enabled
            offText: PET Tracers Disabled
        contents:
            kind: panel.textarea
            name: contents
            id: pet-tracer-contents
            label: PET Tracer List
            description: >
                List entries should be separated by whitespace.

# --------------------------------------------------
# ==================================================





# ==================================================
# 'Notifications' tab elements
# --------------------------------------------------

notificationsConfig:
    kind: panel.form
    id: notifications-config
    label: Notifications Configuration
    reload: true
    _load: "#?:XNAT.app.projectSettings.getNotificationsList()"
    load: "~/data/projects/{{XNAT.data.context.project}}/resources/notifications/files/archival.lst > [[notif_list]]"
    action: "#?:XNAT.app.projectSettings.setNotificationsList()"
    _action: "~/data/projects/{{XNAT.data.context.project}}/resources/notifications/files/archival.lst < [[notif_list]]"
    _contentType: "text/plain"
    _method: PUT
    _params:
        - inbody=true
        - overwrite=true
        - content=NOTIFY_ARCHIVAL
        - XNAT_CSRF={{csrfToken}}
    contents:
        notif_list:
            kind: panel.textarea
            id: notification-email-list
            name: notif_list
            label: Email Addresses
            _validation:
                type: emails allow-empty
                message: "Please enter properly formatted email addresses."
            description: >
                Emails should be comma separated (i.e. tim@somewhere.com,jenny@somewhere.com).


# --------------------------------------------------
# ==================================================





# ==================================================
# 'Anonymization' tab elements
# --------------------------------------------------

projectAnonForm:
    kind: panel.form
    id: project-anon-form
    label: Project Anonymization Script
    load: "#?:XNAT.app.projectSettings.getProjectAnonScript()"
    action: "#?:XNAT.app.projectSettings.setProjectAnonScript()"
    _contentType: text/plain
    _method: PUT
    contents:
        enableScript:
            kind: panel.switchbox
            label: Enable Script
            id: project-anon-enable
            name: enableScript
            onText: Project Anon Script Enabled
            offText: Project Anon Script Disabled
        anonScriptText:
            kind: panel.textarea
            id: project-anon-script
            label: Script
            name: anonScriptText
#            description: >
#                Double-click to open in a code editor dialog.

# --------------------------------------------------
# ==================================================





# ==================================================
# 'Series Import' tab elements
# --------------------------------------------------

seriesImportForm:
    kind: panel.form
    id: series-import-form
    label: Series Import Filters
    load: "#?:XNAT.app.projectSettings.getSeriesImportFilter()"
    action: "#?:XNAT.app.projectSettings.setSeriesImportFilter()"
    _contentType: text/plain
    _method: PUT
    contents:
        about:
            tag: p
            content: >
                This is the series import filter applied to incoming and archiving DICOM resources for your project.
                This filter can also be supplemented by the site-wide series import filter.
        filterSettingsSubhead:
            kind: panel.subhead
            label: Filter Settings
        enableFilter:
            kind: panel.input.switchbox
            name: enabled
            id: series-import-enable
            label: Enable Filter
            options: 'true|false'
            onText: Filter Enabled
            offText: Filter Disabled
        filterMode:
            kind: panel.select.single
            label: Filter Mode
            name: mode
            id: filter-mode
            options:
                "!": Select...
                whitelist: Whitelist
                blacklist: Blacklist
                modalityMap: Modality Map
            description: >
                Creating a whitelist means that <i>only</i> DICOM series with a series description
                that matches one of series filter patterns will be considered by XNAT import tools
                such as the <a href="/app/template/UploadAssistantPage.vm">XNAT Upload
                Assistant</a>. Creating a blacklist means that all DICOM series will be considered
                <i>except</i> for series that have one of the specified series filter patterns. A
                modality map lets you specify boolean expressions in JavaScript that can use DICOM
                header values from incoming DICOM objects to decide the appropriate modality for the
                destination session.
        seriesImportFilter:
            kind: panel.textarea
            id: series-import-filter
            name: list
            element:
                rows: 20
            description: >
                The series filters can be written as exact string matches, but also can be regular expressions. The regular expressions are evaluated
                using the <a href="http://docs.oracle.com/javase/tutorial/essential/regex/" target="_blank">Java regular expression syntax</a>. These
                expressions are case-insensitive, i.e. the string "SAG LOCALIZER" will also match "Sag Localizer".

# --------------------------------------------------
# ==================================================




projectResourceSettings:
    kind: panel
    contents:
        projectResourcSettingsTemplate:
            template: 'id=project-resource-settings-template'



# projectSettings.js file
projectSettingsJS:
    _tag: "script|src=/scripts/xnat/app/projectSettings.js"
    tag: script


projectSettingsInit:
    tag: script
    _content: ""
    _content: >
        XNAT.app.projectSettings.init()



# DEMO TAB
users:
    kind: tab
    label: User List
    group: projectAdmin
    contents:
        ${userTable}

userTable:
    kind: table.dataTable
    url: /data/projects/{{XNAT.data.context.project}}/users
    columns:
        NAME:
            label: Name
            filter: true
            sort: true
            apply: >
                !? function(){
                    return this.firstname + ' ' + this.lastname
                }
        login:
            label: Username
            filter: true
            sort: true
        email:
            label: Email
            filter: true
            sort: true
            html: >
                <a href="mailto:__VALUE__">__VALUE__</a>
        displayname:
            label: Group
            filter: true
            sort: true
