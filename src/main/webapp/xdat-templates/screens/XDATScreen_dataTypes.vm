##Copyright 2005 Harvard University / Howard Hughes Medical Institute (HHMI) All Rights Reserved
$page.setTitle("XDAT")
$page.setLinkColor($ui.alink)
$page.setVlinkColor($ui.vlink)
#set ($pageName = "SearchResults.vm")
#set ($template = $data.getTemplateInfo())
$!template.setLayoutTemplate("DefaultExptList.vm")
#set ($currentPage = $currentPage + 1)
#if ($data.message)
<div class="error">$data.message</div><br>
#end
#parse("/screens/admin_bar.vm")

#set ( $url = $link.setPage("XDATScreen_add_xdat_element_security.vm").addPathInfo("popup","true")  )

<div id="data-type-list" class="admin-content">

    <div class="header">
        <b>Data Types</b>
        <button id="setup-data-type" type="button"
            ##data-url="$url"
            ##onclick="return popupCentered('$url','Edit',960,720,3);"
            onclick="XNAT.app.adminPopupDialog('$url')"
            class="btn1 btn-sm pull-right">Setup Additional Data Type</button>
        <div class="clearfix clear"></div>
    </div>

    <form name="form1" method="post" action="$link.setAction("ManageDataTypes")">

        <div class="data-table" style="margin-bottom:15px;">
            <table id="data-type-table" class="xnat-table clean sortable" style="width: 100%">
            <tr>
                <th class="sort"><b>Element</b></th>
                <th class="sort name-singular">
                    <span title="Term used to describe one instance of this data.">Singular</span>
                </th>
                <th class="sort name-plural">
                    <span title="Term used to describe more than one occurrence of this data.">Plural</span>
                </th>
                <th class="sort">
                    <span title="Short code used in the creation of IDs">Code</span>
                </th>
                <th class="sort">
                    <span title="Whether or not unspecified users can use this data-type in its $displayManager.getPluralDisplayNameForProject().toLowerCase().">Accessible</span>
                </th>
                <th class="sort">
                    <span title="Whether or not access to data of this type should be restricted.">Secured</span>
                </th>
                <th class="sort">
                    <span title="Whether or not data of this type should be searchable.">Searchable</span>
                </th>
                <th class="sort">
                    <span title="Whether or not data of this type should be browseable.">Browseable</span>
                </th>
            </tr>
            #set($dt_count=0)
            #set($row=0)
            #foreach($data_type in $data_types)
                #if($row==0)
                <tr>
                    #set($row=1)
                #else
                <tr>
                    #set($row=0)
                #end

                #set ( $url = $link.setAction("DisplayItemAction").addPathInfo("search_element","xdat:element_security").addPathInfo("search_field","xdat:element_security.element_name").addPathInfo("search_value","$!data_type.getProperty('element_name')").addPathInfo("popup","true")  )

                <td>
                    <a class="data-type-link" target="_blank" href="$url">$!data_type.getProperty("element_name")</a>
                </td>
                <td class="name-singular">
                    <i class="hidden">$!data_type.getProperty("singular")</i>
                    <input type="text" value="$!data_type.getProperty("singular")"
                            id="xdat:security/element_security_set/element_security[$dt_count]/singular"
                            name="xdat:security/element_security_set/element_security[$dt_count]/singular"
                            size="25">
                </td>
                <td class="name-plural">
                    <i class="hidden">$!data_type.getProperty("plural")</i>
                    <input type="text" value="$!data_type.getProperty("plural")"
                            id="xdat:security/element_security_set/element_security[$dt_count]/plural"
                            name="xdat:security/element_security_set/element_security[$dt_count]/plural"
                            size="25">
                </td>
                <td class="center">
                    <i class="hidden">$!data_type.getProperty("code")</i>
                    <input type="text" value="$!data_type.getProperty("code")"
                            id="xdat:security/element_security_set/element_security[$dt_count]/code"
                            name="xdat:security/element_security_set/element_security[$dt_count]/code"
                            size="5" maxlength="5">
                </td>
                <td class="center">
                    <i class="hidden">#if($!data_type.getBooleanProperty("accessible")) 1 #else 2 #end</i>
                    <input type="checkbox" #if($!data_type.getBooleanProperty("accessible"))checked#end
                            id="xdat:security/element_security_set/element_security[$dt_count]/accessible"
                            name="xdat:security/element_security_set/element_security[$dt_count]/accessible"
                            value="true">
                </td>
                <td class="center">
                    <i class="hidden">#if($!data_type.getBooleanProperty("secure")) 1 #else 2 #end</i>
                    <input type="checkbox" #if($!data_type.getBooleanProperty("secure"))checked#end
                            id="xdat:security/element_security_set/element_security[$dt_count]/secure"
                            name="xdat:security/element_security_set/element_security[$dt_count]/secure"
                            value="true">
                </td>
                <td class="center">
                    <i class="hidden">#if($!data_type.getBooleanProperty("searchable")) 1 #else 2 #end</i>
                    <input type="checkbox" #if($!data_type.getBooleanProperty("searchable"))checked#end
                            id="xdat:security/element_security_set/element_security[$dt_count]/searchable"
                            name="xdat:security/element_security_set/element_security[$dt_count]/searchable"
                            value="true">
                </td>
                <td class="center">
                    <i class="hidden">#if($!data_type.getBooleanProperty("browse")) 1 #else 2 #end</i>
                    <input type="checkbox" #if($!data_type.getBooleanProperty("browse"))checked#end
                            id="xdat:security/element_security_set/element_security[$dt_count]/browse"
                            name="xdat:security/element_security_set/element_security[$dt_count]/browse"
                            value="true">
                </td>
                <input type="hidden" value="$!data_type.getProperty("element_name")"
                       id="xdat:security/element_security_set/element_security[$dt_count]/element_name"
                       name="xdat:security/element_security_set/element_security[$dt_count]/element_name">
                #set($dt_count=$dt_count + 1)
            </tr>
            #end
        </table>

        </div>

        <input type="submit" class="btn1" style="float:right;" value="Save">

        <div class="clear"></div>

    </form>

</div>

<style>
    .xnat-table.narrow > thead > tr > th,
    .xnat-table.narrow > tbody > tr > th,
    .xnat-table.narrow > tbody > tr > td,
    .xnat-table.narrow > tfoot > tr > th,
    .xnat-table.narrow > tfoot > tr > td {
        padding: 4px 0px;
    }
    .xnat-table.narrow > thead > tr > th:first-child,
    .xnat-table.narrow > tbody > tr > th:first-child,
    .xnat-table.narrow > tbody > tr > td:first-child,
    .xnat-table.narrow > tfoot > tr > th:first-child,
    .xnat-table.narrow > tfoot > tr > td:first-child {
        padding-left: 4px;
    }
</style>

<script type="text/javascript">

    jq('a.data-type-link').click(function(e){
        e.preventDefault();
        XNAT.app.adminPopupDialog(this.href);
        //popupCentered(this.href,' ',960,720,3)
    });

    //ts_makeSortable(document.getElementById('data-type-table'));

    //jq('#data-type-table').tableSort();

</script>
<script>
    console.log('datatypes.js');

    var XNAT = getObject(XNAT || {});

    (function(factory){
        if (typeof define === 'function' && define.amd) {
            define(factory);
        }
        else if (typeof exports === 'object') {
            module.exports = factory();
        }
        else {
            return factory();
        }
    }(function() {

        var datatypes, undefined;

        XNAT.admin =
                getObject(XNAT.admin || {});
        XNAT.admin.datatypes = {};

        function binaryBoolean(bool){
            return (bool === 'true') ? '1' : '0';
        }

        // build form objects
        var editDatatypeFormObj = function(datatype) {
            return {
                kind: 'panel.form',
                id: 'edit-xsitype-form',
                header: false,
                footer: false,
                element: {
                    style: { border: 'none', margin: '0' },
                    action: '/app/action/ModifyItem',
                    method: 'post'
                },
                contents: {
                    singular: {
                        kind: 'panel.input.text',
                        name: 'xdat:element_security.singular',
                        label: 'Singular Name'
                    },
                    plural: {
                        kind: 'panel.input.text',
                        name: 'xdat:element_security.plural',
                        label: 'Plural Name'
                    },
                    code: {
                        kind: 'panel.input.text',
                        name: 'xdat:element_security.code',
                        label: 'Code'
                    },
                    category: {
                        kind: 'panel.input.hidden',
                        name: 'xdat:element_security.category',
                        value: ''
                    },
                    accessible: {
                        kind: 'panel.input.switchbox',
                        name: 'xdat:element_security.accessible',
                        label: 'Accessible',
                        onText: 'Yes',
                        offText: 'No',
                        values: '1|0'
                    },
                    secure: {
                        kind: 'panel.input.switchbox',
                        name: 'xdat:element_security.secure',
                        label: 'Secure',
                        onText: 'Yes',
                        offText: 'No',
                        values: '1|0'
                    },
                    searchable: {
                        kind: 'panel.input.switchbox',
                        name: 'xdat:element_security.searchable',
                        label: 'Searchable',
                        onText: 'Yes',
                        offText: 'No',
                        values: '1|0'
                    },
                    browse: {
                        kind: 'panel.input.switchbox',
                        name: 'xdat:element_security.browse',
                        label: 'Browseable',
                        onText: 'Yes',
                        offText: 'No',
                        values: '1|0'
                    },
                    advanced: {
                        tag: 'div#advanced-settings',
                        contents: {
                            advancedSeparator: {
                                tag: 'hr',
                                element: {
                                    style: {
                                        margin: '2em 0'
                                    }
                                }
                            },
                            advancedTitle: {
                                tag: 'p',
                                content: '<strong>Advanced Settings</strong>'
                            },
                            secureRead: {
                                kind: 'panel.input.switchbox',
                                name: 'xdat:element_security.secure_read',
                                label: 'Secure Read',
                                onText: 'Yes',
                                offText: 'No',
                                values: '1|0'
                            },
                            secureCreate: {
                                kind: 'panel.input.switchbox',
                                name: 'xdat:element_security.secure_create',
                                label: 'Secure Create',
                                onText: 'Yes',
                                offText: 'No',
                                values: '1|0'
                            },
                            secureEdit: {
                                kind: 'panel.input.switchbox',
                                name: 'xdat:element_security.secure_edit',
                                label: 'Secure Edit',
                                onText: 'Yes',
                                offText: 'No',
                                values: '1|0'
                            },
                            secureDelete: {
                                kind: 'panel.input.switchbox',
                                name: 'xdat:element_security.secure_delete',
                                label: 'Secure Delete',
                                onText: 'Yes',
                                offText: 'No',
                                values: '1|0'
                            },
                            secondaryPassword: {
                                kind: 'panel.input.switchbox',
                                name: 'xdat:element_security.secondary_password',
                                label: 'Requires Secondary Password',
                                onText: 'Yes',
                                offText: 'No',
                                values: '1|0'
                            },
                            usage: {
                                kind: 'panel.input.textarea',
                                name: 'xdat:element_security.usage',
                                label: 'Restricted Usage',
                                description: 'Which projects can use this data type? (Specify a comma-separated list of project IDs)',
                                element: {
                                    rows: '2'
                                }
                            },
                            restrictIp: {
                                kind: 'panel.input.switchbox',
                                name: 'xdat:element_security.secure_ip',
                                label: 'Restrict By IP Address',
                                onText: 'Yes',
                                offText: 'No',
                                values: '1|0'
                            }
                        }
                    },
                }
            }
        }

        var formPresubmit = function(datatype){
            var formInit = [
                XNAT.ui.panel.input.hidden({
                    name: 'xdat:element_security.element_name',
                    value: datatype['xdat:element_security.element_name']
                }),
                XNAT.ui.panel.input.hidden({
                    name: 'edit_screen',
                    value: 'XDATScreen_edit_xdat_element_security.vm'
                }),
                XNAT.ui.panel.input.hidden({
                    name: 'ELEMENT_0',
                    value: 'xdat:element_security'
                }),
                XNAT.ui.panel.input.hidden({
                    name: 'eventSubmit_doSetup',
                    value: 'Submit'
                })
            ];

            var psf = datatype.securityFields;
            if (psf){
                psf.forEach(function(securityField,i){
                    formInit.push(
                            XNAT.ui.panel.input.hidden({
                                name: 'xdat:element_security.primary_security_fields.primary_security_field__'+i+'.primary_security_field',
                                value: securityField
                            })
                    );
                    formInit.push(
                            XNAT.ui.panel.input.hidden({
                                name: 'xdat:element_security.primary_security_fields.primary_security_field__'+i+'.xdat_primary_security_field_id',
                                value: i+1
                            })
                    );
                });
            }

            return formInit;
        }

        XNAT.admin.datatypes.edit = function(xsiType){
            var datatype = XNAT.admin.datatypes[xsiType];
            if (!datatype || typeof datatype !== 'object') {
                XNAT.ui.banner.top(2000,'Data type '+xsiType+ ' not recognized','error');
                return false;
            }

            XNAT.ui.dialog.open({
                title: 'Edit '+ xsiType + ' Data Type',
                width: 600,
                content: '<div id="edit-xsitype-form-container"></div>',
                beforeShow: function(obj){
                    var container = obj.$modal.find('#edit-xsitype-form-container');
                    XNAT.spawner.spawn({ form: editDatatypeFormObj(datatype) }).render(container);

                    var form = obj.$modal.find('form');
                    form.setValues(datatype);

                    form.append(spawn('!', formPresubmit(datatype)));
                },
                buttons: [
                    {
                        label: 'Save Changes',
                        isDefault: true,
                        close: true,
                        action: function(obj){
                            var form = obj.$modal.find('form');
                            submitEditForm(form);
                        }
                    },
                    {
                        label: 'Cancel',
                        close: true
                    }
                ]
            })
        }

        XNAT.admin.datatypes.addActionRow = function(table){
            var i = jq(table).data('action-count')-1;

            var tr = jq(table).find('tbody').find('tr')[i];
            var newTr = jq(tr).clone();

            jq(newTr[0]).find('input').each(function(){
                var name = jq(this).prop('name');
                name = name.replace(i,i+1);
                jq(this).prop('name',name);
                jq(this).val('');
            });

            jq(table)
                    .data('action-count',i+2)
                    .find('tbody').append(newTr[0]);
        }
        XNAT.admin.datatypes.deleteActionRow = function(event){
            event.preventDefault;
            var row = jq(event.target).parents('tr');

            jq(row).slideUp()
                    .find('input.delete').prop('disabled',false);
        }

        XNAT.admin.datatypes.editActions = function(xsiType){
            var datatype = XNAT.admin.datatypes[xsiType];
            if (!datatype || typeof datatype !== 'object') {
                XNAT.ui.banner.top(2000,'Data type '+xsiType+ ' not recognized','error');
                return false;
            }

            var reportActionObj = {
                id: 'xdat:element_security.element_actions.element_action__0.xdat_element_action_type_id',
                displayName: 'xdat:element_security.element_actions.element_action__0.display_name',
                actionName: 'xdat:element_security.element_actions.element_action__0.element_action_name',
                grouping: 'xdat:element_security.element_actions.element_action__0.grouping',
                popup: 'xdat:element_security.element_actions.element_action__0.popup',
                secureAccess: 'xdat:element_security.element_actions.element_action__0.secureAccess',
                parameterString: 'xdat:element_security.element_actions.element_action__0.parameterString'
            };
            var listingActionObj = {
                id: 'xdat:element_security.listing_actions.listing_action__0.xdat_element_security_listing_action_id',
                displayName: 'xdat:element_security.listing_actions.listing_action__0.display_name',
                actionName: 'xdat:element_security.listing_actions.listing_action__0.element_action_name',
                grouping: 'xdat:element_security.listing_actions.listing_action__0.grouping',
                popup: 'xdat:element_security.listing_actions.listing_action__0.popup',
                secureAccess: 'xdat:element_security.listing_actions.listing_action__0.secureAccess',
                parameterString: 'xdat:element_security.listing_actions.listing_action__0.parameterString'
            }

            var actionTable = function(actions,inputobj){
                var atTable = XNAT.table({
                    className: 'xnat-table clean narrow',
                    style: {
                        width: '100%',
                        'margin-top': '5px',
                        'margin-bottom': '15px'
                    },
                    data: {
                        'action-count': actions.length
                    }
                });
                atTable.thead().tr()
                        .th({ addClass: 'left' })
                        .th({ addClass: 'left' }, '<b>Label</b>')
                        .th({ addClass: 'left' }, '<b>Action Screen Name</b>')
                        .th({ addClass: 'left' }, '<b>Grouping</b>')
                        .th({ addClass: 'left' }, '<b>Popup</b>')
                        .th({ addClass: 'left' }, '<b>Secure Access</b>')
                        .th({ addClass: 'left' }, '<b>Additional Params</b>')
                atTable.tbody();

                if (actions.length) {
                    actions.forEach(function (action, i) {
                        function resolveName(name, i) {
                            var arr = name.split('0');
                            return arr[0] + i + arr[1];
                        }

                        function textInput(key, i, val) {
                            return spawn('input', {
                                type: 'text',
                                name: resolveName(inputobj[key], i),
                                value: action[key]
                            })
                        }

                        function hiddenInput(key, i, val) {
                            return spawn('input', {
                                type: 'hidden',
                                name: resolveName(inputobj[key], i),
                                value: action[key]
                            })
                        }

                        function deleteIcon(key, i) {
                            return spawn('button.btn.sm.delete.delete-action-row', {
                                title: 'Delete Action'
                            }, [
                                spawn('i.fa.fa-trash'),
                                spawn('input.delete', {
                                    type: 'hidden',
                                    disabled: 'disabled',
                                    name: 'REMOVE__' + i + '=xdat:element_security_listing_action.xdat_element_security_listing_action_id',
                                    value: action[key]
                                })
                            ]);
                        }

                        function selectPopup(key, i) {
                            function selectOpt(val) {
                                return (val === action[key]) ? 'selected' : false
                            }

                            return spawn('select', {
                                name: resolveName(inputobj[key], i)
                            }, [
                                spawn('option', {value: '', selected: selectOpt('')}),
                                spawn('option', {value: 'always', selected: selectOpt('always')}, 'always'),
                                spawn('option', {value: 'sometimes', selected: selectOpt('sometimes')}, 'sometimes'),
                                spawn('option', {value: 'never', selected: selectOpt('never')}, 'never')
                            ])
                        }

                        function selectAccess(key, i) {
                            function selectOpt(val) {
                                return (val === action[key]) ? 'selected' : false
                            }

                            return spawn('select', {
                                name: resolveName(inputobj[key], i)
                            }, [
                                spawn('option', {value: '', selected: selectOpt('')}),
                                spawn('option', {value: 'edit', selected: selectOpt('edit')}, 'edit'),
                                spawn('option', {value: 'delete', selected: selectOpt('delete')}, 'delete')
                            ])
                        }

                        // use the toBody() selector rather than the tbody() selector
                        // to specify that we want to add this row to the existing table body, not create a new one
                        atTable.toBody().tr()
                                .td([deleteIcon('id', i)])
                                .td([textInput('displayName', i), hiddenInput('id', i)])
                                .td([textInput('actionName', i)])
                                .td([textInput('grouping', i)])
                                .td([selectPopup('popup', i)])
                                .td([selectAccess('secureAccess', i)])
                                .td([textInput('parameterString', i)])
                    })
                }

                function addRowButton(){
                    return spawn('button.btn.sm',{
                        onclick: function(e){
                            e.preventDefault();
                            var table = jq(this).parents('table');
                            XNAT.admin.datatypes.addActionRow(table)
                        },
                        html: '<i class="fa fa-plus"></i> Add Action'
                    })
                }
                atTable.tfoot().tr({class: 'add-new-action-row'})
                        .td({colSpan: '7'}, [ addRowButton()]);

                return atTable.table;
            }

            // open & populate editor dialog
            var url = XNAT.url.csrfUrl('/app/action/ModifyItem/popup/true?popup=true');

            XNAT.ui.dialog.open({
                width: 960,
                title: 'View Actions for '+datatype['xdat:element_security.plural'],
                content: '<form id="action-table-form"></form>',
                beforeShow: function(obj){
                    var form = obj.$modal.find('#action-table-form');
                    form.append( spawn('h3','Report Actions') );
                    form.append( spawn('div',{style: { 'margin-bottom': '2em' }}, [ actionTable(datatype.reportActions, reportActionObj) ]) );

                    form.append( spawn('h3','Listing Actions') );
                    form.append( spawn('div',{style: { 'margin-bottom': '2em' }}, [ actionTable(datatype.listingActions, listingActionObj) ]) );

                    form.append( spawn('!', formPresubmit(datatype)));
                },
                buttons: [
                    {
                        label: 'Save Changes',
                        isDefault: true,
                        close: true,
                        action: function(obj){
                            var form = obj.$modal.find('form');
                            submitEditForm(form);
                        }
                    },
                    {
                        label: 'Cancel',
                        close: true
                    }
                ]
            })
        }

        function submitEditForm(form){
            var url = XNAT.url.csrfUrl('/app/action/ModifyItem/popup/true?popup=true');
            var formData = form.serialize();

            XNAT.xhr.ajax({
                url: url,
                method: 'POST',
                data: formData,
                cache: false,
                success: function(data){
                    console.log(data);
                    XNAT.ui.banner.top(2000,'Data type updated','success');
//                    window.location.reload();
                },
                fail: function(e){
                    console.log(e);
                }
            })
        }

        jq(document).on('click','.delete-action-row',function(e){
            e.preventDefault();
            XNAT.admin.datatypes.deleteActionRow(e);
        });

        // build datatype object
        #foreach($data_type in $data_types)
            XNAT.admin.datatypes['$!data_type.getProperty("element_name")'] = {
                'xdat:element_security.element_name': '$!data_type.getProperty("element_name")',
                'xdat:element_security.singular': '$!data_type.getProperty("singular")',
                'xdat:element_security.plural': '$!data_type.getProperty("plural")',
                'xdat:element_security.code': '$!data_type.getProperty("code")',
                'xdat:element_security.accessible': binaryBoolean('$!data_type.getBooleanProperty("accessible")'),
                'xdat:element_security.secure': binaryBoolean('$!data_type.getBooleanProperty("secure")'),
                'xdat:element_security.searchable': binaryBoolean('$!data_type.getBooleanProperty("searchable")'),
                'xdat:element_security.browse': binaryBoolean('$!data_type.getBooleanProperty("browse")'),
                reportActions: [
                    #set ($reportActions = $!data_type.getChildItems("xdat:element_security/element_actions/element_action"))
                    #foreach($reportAction in $reportActions)
                        {
                            id: '$!reportAction.getStringProperty("xdat_element_action_type_id")',
                            actionName: '$!reportAction.getStringProperty("element_action_name")',
                            displayName: '$!reportAction.getStringProperty("display_name")',
                            grouping: '$!reportAction.getStringProperty("grouping")',
                            popup: '$!reportAction.getStringProperty("popup")',
                            secureAccess: '$!reportAction.getStringProperty("secureAccess")',
                            sequence: '$!reportAction.getStringProperty("sequence")',
                            parameterString: '$!reportAction.getStringProperty("parameterString")'
                        },
                    #end
                ],
                listingActions: [
                    #set ($listingActions = $!data_type.getChildItems("xdat:element_security/listing_actions/listing_action"))
                    #foreach($listingAction in $listingActions)
                        {
                            id: '$!listingAction.getStringProperty("xdat_element_security_listing_action_id")',
                            actionName: '$!listingAction.getStringProperty("element_action_name")',
                            displayName: '$!listingAction.getStringProperty("display_name")',
                            grouping: '$!listingAction.getStringProperty("grouping")',
                            popup: '$!listingAction.getStringProperty("popup")',
                            secureAccess: '$!listingAction.getStringProperty("secureAccess")',
                            sequence: '$!listingAction.getStringProperty("sequence")',
                            parameterString: '$!listingAction.getStringProperty("parameterString")'
                        },
                    #end
                ],
                'xdat:element_security.secure_read': binaryBoolean('$!data_type.getBooleanProperty("secure_read")'),
                'xdat:element_security.secure_create': binaryBoolean('$!data_type.getBooleanProperty("secure_create")'),
                'xdat:element_security.secure_edit': binaryBoolean('$!data_type.getBooleanProperty("secure_edit")'),
                'xdat:element_security.secure_delete': binaryBoolean('$!data_type.getBooleanProperty("secure_delete")'),
                'xdat:element_security.secondary_password': binaryBoolean('$!data_type.getBooleanProperty("secondary_password")'),
                'xdat:element_security.secure_ip': binaryBoolean('$!data_type.getBooleanProperty("secure_ip")'),
                'xdat:element_security.quarantine': binaryBoolean('$!data_type.getBooleanProperty("quarantine")'),
                securityFields: [
                    #set ($securityFields = $!data_type.getChildItems("xdat:element_security/primary_security_fields/primary_security_field"))
                    #foreach($securityField in $securityFields)
                        '$!securityField.getStringProperty("primary_security_field")',
                    #end
                ]
            }
        #end

    }));
</script>