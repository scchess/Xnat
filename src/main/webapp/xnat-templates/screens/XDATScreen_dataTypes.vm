##Copyright 2005 Harvard University / Howard Hughes Medical Institute (HHMI) All Rights Reserved
$page.setTitle("Manage Data Types")
#set ($template = $data.getTemplateInfo())
$!template.setLayoutTemplate("DefaultExptList.vm")

<div class="admin-content">
    #if ($data.message)
        <div class="error">$data.message</div><br>
    #end

    <header>
        <h2 class="pull-left">
            Manage Data Types
        </h2>
        <div class="clearfix clear"></div>
    </header>
    <div id="data-types-commands">
        <!-- container for command buttons -->
    </div>
    <div id="data-types-table-container">
        <!-- container where xnat-table will be injected -->
    </div>
    <div id="data-types-footer">
        <!-- miscellaneous -->
    </div>
</div>

## Prepare JSON representation of velocity data types object
## Requires that $data_types has been defined
<script>
    var XNAT = getObject(XNAT || {});

    (function(factory){
        if (typeof define === 'function' && define.amd) {
            define(factory);
        }
        else if (typeof exports === 'object') {
            module.exports = factory();
        }
        else {
            return factory();
        }
    }(function(){
        var dataTypes, showDataType, dataTypeList, spawnTable;

        XNAT.data = getObject(XNAT.data || {});

        XNAT.data.dataTypes = getObject(XNAT.data.dataTypes || {});

        XNAT.data.dataTypes.list = dataTypeList = []

        #foreach($data_type in $data_types)
            dataTypeList.push({
                'element-name'  : '$!data_type.getProperty('element_name')',
                'xsiType'       : '$!data_type.getProperty('element_name')',
                'singular'      : '$!data_type.getProperty('singular')',
                'plural'        : '$!data_type.getProperty('plural')',
                'code'          : '$!data_type.getProperty('code')',
                'accessible'    : '$!data_type.getProperty('accessible')',
                'secure'        : '$!data_type.getProperty('secure')',
                'searchable'    : '$!data_type.getProperty('searchable')',
                'browse'        : '$!data_type.getProperty('browse')',
            })
        #end

        XNAT.data.dataTypes.showDatatype = showDataType = function(){

        }

        function showIcon(val){
            if (val === '1') return spawn('i',{ className: 'fa fa-check' });
        }

        function actionsMenu(rootElement){
            var actions = [
                { label: 'Edit Data Type' },
                { label: 'Manage Report Actions' },
                { label: 'Manage Listing Actions' }
            ], menuItems = [];

            actions.forEach(function(action){
                menuItems.push(
                    spawn('li', [
                        spawn('a.menu-action', { onclick: function(){ console.log(this,rootElement) }}, action.label)
                    ]
                ));
            });

            return spawn('!', [
                spawn('div.inline-actions-menu-toggle',[
                    spawn('i',{ className: 'fa fa-bars', title: 'Actions' })
                ]),
                spawn('ul.inline-actions-menu', { style: { display: 'none' }}, menuItems )
            ]);
        }

        XNAT.data.dataTypes.spawnTable = spawnTable = function(){

            var dataRows$ = [];

            return {
                kind: 'table.dataTable',
                name: 'dataTypesListing',
                id: 'datatypes-listing',
                data: dataTypeList,
                table: {
                    classes: 'datatype-listing',
                    on: [
                            ['click', 'a.viewDatatype', showDataType]
                    ]
                },
                sortable: 'xsiType, label, code',
                filterable: 'xsiType, label, code, access, secure, search, browse',
                items: {
                    xsiType: {
                        label: 'Element (xsiType)',
                        th: { className: 'left' },
                        filter: true,
                        apply: function(){
                            return spawn('a.viewDatatype',this['xsiType'])
                        }
                    },
                    label: {
                        label: 'Label (Plural)',
                        filter: true,
                        apply: function(){
                            return this['plural']
                        }
                    },
                    code: {
                        label: 'Code',
                        title: 'Short code used in the creation of IDs',
                        filter: true,
                        apply: function(){
                            return this['code']
                        }
                    },
                    access: {
                        label: 'Accessible',
                        title: 'Whether or not unspecified users can use this data-type in its $displayManager.getPluralDisplayNameForProject().toLowerCase()',
                        td: { className: 'center' },
                        filter: function(table){
                            return spawn('div.center',[
                                XNAT.ui.select.menu({
                                    value: 99,
                                    options: {
                                        all: {
                                            label: 'All',
                                            value: '99',
                                            selected: true
                                        },
                                        on: {
                                            label: 'True',
                                            value: '1'
                                        },
                                        off: {
                                            label: 'False',
                                            value: '0'
                                        }
                                    },
                                    element: {
                                        id: 'filter-datatypes-accessible',
                                        on: {
                                            change: function(){
                                                var filterClass = 'filter-accessible';
                                                var selectedValue = this.value || 0;
                                                dataRows$ = dataRows$.length ? dataRows$ : jq(table).find('tbody').find('tr');
                                                if (selectedValue === '99') {
                                                    dataRows$.removeClass(filterClass);
                                                }
                                                else {
                                                    dataRows$.addClass(filterClass).filter(function(){
                                                        var rowValue = this.querySelector('input.accessible-value').value;
                                                        return selectedValue === rowValue;
                                                    }).removeClass(filterClass);
                                                }
                                            }
                                        }
                                    }

                                }).element
                            ])
                        },
                        apply: function(){
                            return spawn('!',[
                                showIcon( this['accessible'] ),
                                spawn('input.hidden.accessible-value|type=hidden', { value: this['accessible'] })
                            ]);
                        }
                    },
                    secured: {
                        label: 'Secured',
                        title: 'Whether or not access to data of this type should be restricted',
                        td: { className: 'center' },
                        filter: function(table){
                            return spawn('div.center',[
                                XNAT.ui.select.menu({
                                    value: 99,
                                    options: {
                                        all: {
                                            label: 'All',
                                            value: '99',
                                            selected: true
                                        },
                                        on: {
                                            label: 'True',
                                            value: '1'
                                        },
                                        off: {
                                            label: 'False',
                                            value: '0'
                                        }
                                    },
                                    element: {
                                        id: 'filter-datatypes-secured',
                                        on: {
                                            change: function(){
                                                var filterClass = 'filter-secured';
                                                var selectedValue = this.value || 0;
                                                dataRows$ = dataRows$.length ? dataRows$ : jq(table).find('tbody').find('tr');
                                                if (selectedValue === '99') {
                                                    dataRows$.removeClass(filterClass);
                                                }
                                                else {
                                                    dataRows$.addClass(filterClass).filter(function(){
                                                        var rowValue = this.querySelector('input.secured-value').value;
                                                        return selectedValue === rowValue;
                                                    }).removeClass(filterClass);
                                                }
                                            }
                                        }
                                    }
                                }).element
                            ])
                        },
                        apply: function(){
                            return spawn('!', [
                                showIcon( this['secure'] ),
                                spawn('input.hidden.secured-value|type=hidden',{ value: this['secure'] })
                            ]);
                        }
                    },
                    search: {
                        label: 'Searchable',
                        title: 'Whether or not data of this type should be searchable',
                        td: { className: 'center' },
                        filter: function(table){
                            return spawn('div.center',[
                                XNAT.ui.select.menu({
                                    value: 99,
                                    options: {
                                        all: {
                                            label: 'All',
                                            value: '99',
                                            selected: true
                                        },
                                        on: {
                                            label: 'True',
                                            value: '1'
                                        },
                                        off: {
                                            label: 'False',
                                            value: '0'
                                        }
                                    },
                                    element: {
                                        id: 'filter-datatypes-searchable',
                                        on: {
                                            change: function(){
                                                var filterClass = 'filter-searchable';
                                                var selectedValue = this.value || 0;
                                                dataRows$ = dataRows$.length ? dataRows$ : jq(table).find('tbody').find('tr');
                                                if (selectedValue === '99') {
                                                    dataRows$.removeClass(filterClass);
                                                }
                                                else {
                                                    dataRows$.addClass(filterClass).filter(function(){
                                                        var rowValue = this.querySelector('input.searchable-value').value;
                                                        return selectedValue === rowValue;
                                                    }).removeClass(filterClass);
                                                }
                                            }
                                        }
                                    }
                                }).element
                            ])
                        },
                        apply: function(){
                            return spawn('!', [
                                showIcon( this['searchable'] ),
                                spawn('input.hidden.searchable-value|type=hidden',{ value: this['searchable'] })
                            ]);
                        }
                    },
                    browseable: {
                        label: 'Browseable',
                        title: 'Whether or not data of this type should be browseable',
                        td: { className: 'center' },
                        filter: function(table){
                            return spawn('div.center',[
                                XNAT.ui.select.menu({
                                    value: 99,
                                    options: {
                                        all: {
                                            label: 'All',
                                            value: '99',
                                            selected: true
                                        },
                                        on: {
                                            label: 'True',
                                            value: '1'
                                        },
                                        off: {
                                            label: 'False',
                                            value: '0'
                                        }
                                    },
                                    element: {
                                        id: 'filter-datatypes-browseable',
                                        on: {
                                            change: function(){
                                                var filterClass = 'filter-browseable';
                                                var selectedValue = this.value || 0;
                                                dataRows$ = dataRows$.length ? dataRows$ : jq(table).find('tbody').find('tr');
                                                if (selectedValue === '99') {
                                                    dataRows$.removeClass(filterClass);
                                                }
                                                else {
                                                    dataRows$.addClass(filterClass).filter(function(){
                                                        var rowValue = this.querySelector('input.browse-value').value;
                                                        return selectedValue === rowValue;
                                                    }).removeClass(filterClass);
                                                }
                                            }
                                        }
                                    }
                                }).element
                            ])
                        },
                        apply: function(){
                            return spawn('!', [
                                showIcon( this['browse'] ),
                                spawn('input.hidden.browse-value|type=hidden',{ value: this['browse'] })
                            ]);
                        }
                    },
                    actions: {
                        label: 'Action',
                        td: { className: 'center' },
                        apply: function(){
                            return actionsMenu(this['xsiType'] );
                        }
                    }
                }
            }
        }

        XNAT.data.dataTypes.init = function(container){
            var $manager = $$(container || '#data-types-table-container'), _dtTable;

            _dtTable = XNAT.spawner.spawn({
                datatypeTable: spawnTable()
            });
            _dtTable.done(function(){
                this.render($manager.empty());
            })
        }

        XNAT.data.dataTypes.init();
    }));
</script>

<style>
    .filter-accessible,
    .filter-secured,
    .filter-searchable,
    .filter-browseable { display: none; }
</style>

