<script type="text/javascript" src="$content.getURI("scripts/DynamicJSLoad.js")"></script>
<script type="text/javascript" src="$content.getURI("scripts/debugWindow.js")"></script>
<script type="text/javascript" src="$content.getURI("scripts/lib/x2js/xml2json.js")"></script>
<!--
<script type="text/javascript" src="$content.getURI("scripts/ajaxProtocolManager.js")"></script>
-->

<div id="breadcrumb">
    <span class="crumb">
        <a href='$link.setAction("DisplayItemAction").addPathInfo("search_element","xnat:projectData").addPathInfo("search_field","xnat:projectData.ID").addPathInfo("search_value","$om.getId()")'>$displayManager.getSingularDisplayNameForProject().toUpperCase(): $!om.getDisplayName()</a>
    </span>
    <span class="crumb">
        Custom Variables
    </span>
</div>

<h2>Set Custom Variables For $displayManager.getSingularDisplayNameForProject()</h2>
<div class="info">
    This page allows you to add additional variables to existing data types in your $displayManager.getSingularDisplayNameForProject().toLowerCase().
    These 'custom' variables are grouped together in sets, and can be re-used by other $displayManager.getPluralDisplayNameForProject().toLowerCase(),
    allowing for inter-$displayManager.getSingularDisplayNameForProject().toLowerCase() standardization independent of the specified schema-model.
    (The default setting of 'project-specific' prevents the variables from being shared with other $displayManager.getPluralDisplayNameForProject().toLowerCase().)
</div>

<script>
    var XNAT = getObject(XNAT || {});

    (function(factory){
        if (typeof define === 'function' && define.amd) {
            define(factory);
        }
        else if (typeof exports === 'object') {
            module.exports = factory();
        }
        else {
            return factory();
        }
    }(function(){
        XNAT.customVars = getObject(XNAT.customVars || {});
        XNAT.customVars.definitions = [];
    });

</script>
<style>
    .custom-var-listing {
        margin: 2em 0;
    }
</style>

#foreach($protocol in $om.getStudyprotocol())
    <h3 style="margin-top: 2em;">$protocol.getDatatypeSchemaElement().getPluralDescription() ($protocol.getDataType())</h3>
    <div id="cvars-$protocol.getId()" class="custom-var-listing"></div>
    <script type="text/javascript">
        (function(factory){
            if (typeof define === 'function' && define.amd) {
                define(factory);
            }
            else if (typeof exports === 'object') {
                module.exports = factory();
            }
            else {
                return factory();
            }
        }(function(){

            var cvTable = XNAT.table({ className: 'xnat-table', style: { 'width': '100%' } });
            var container = $('#cvars-$protocol.getId()');
            cvTable.tr()
                    .th({ className: 'left' },'Custom Variable')
                    .th('Fields')
                    .th('Enabled')
                    .th('Action');

            // get the custom variable definitions for this datatype
            // for each definition, add a new row to the table
            var cvUrl = XNAT.url.csrfUrl('/data/projects/${om.getId()}/protocols/${om.getId()}_${protocol.getDataType()}?dataType=${protocol.getDataType()}');
            XNAT.xhr.get(cvUrl)
                    .success(function(xmlData){
                        var converter = new X2JS();
                        var jsonData = converter.xml2json(xmlData);

                        jsonData.datatypeProtocol.definitions.definition.forEach(function(definition){
                            var fields = (definition.fields) ? definition.fields.field : [];
                            var fieldNames = [];
                            if (fields.length) {
                                fields.forEach(function(f){
                                    fieldNames.push(f['_name']);
                                })
                            } else {
                                fieldNames.push('n/a');
                            }
                            cvTable.tr({ className: 'cvar-'+definition['_ID'] })
                                    .td({ className: 'left' }, definition['_ID'] )
                                    .td({ className: 'truncate trunc200'}, fieldNames.toString() )
                                    .td()
                                    .td()
                        })
                    })

            container.append(cvTable.table);

        });

    </script>
#end


<script type="text/javascript">


//protocols[0].show();

function completePage(){
	  if(DEBUG2)writeConsole("completePage()<br>");
  var stopped =false;
  var groupManagers=window.groupManagers;
  for (var groupManagersCounter=0;groupManagersCounter<groupManagers.length;groupManagersCounter++){
				     var gm=groupManagers[groupManagersCounter];
				     gm.onSave.subscribe(function(o){
			        completePage();
		     },this,this);
     stopped = gm.save();
	     if(DEBUG2)writeConsole("completePage(): fg needs save<br>");
	     if(stopped)
     		   break;
  }

  if (!stopped){
   for (var protCounter=0;protCounter<protocols.length;protCounter++){
     var pm=protocols[protCounter];
     if (pm.protocol!=undefined && pm.protocol!=null && pm.canSave()){

		       pm.onSave.subscribe(function(o){
			          completePage();
		       },this,this);

	        if(DEBUG2)writeConsole("completePage(): pm needs save<br>");
        pm.save();
        stopped=true;
        break;
     }
   }
  }

	  if(DEBUG2)writeConsole("completePage(): stopped:" + stopped + "<br>");
  if(!stopped)
  	    location.href='$link.setAction("DisplayItemAction").addPathInfo("search_element","xnat:projectData").addPathInfo("search_field","xnat:projectData.ID").addPathInfo("search_value","$om.getId()")';
}

	function selectProtocol(SELECTbox){
	  if(SELECTbox.selectedIndex!=0)
	  {
     protocols[(SELECTbox.selectedIndex-1)].show();
	  }
	}

</script>
<TABLE width="100%">
 <TR>
  <TD align="center"><INPUT type="button" value="Done" ONCLICK="completePage();"/></TD>
 </TR>
</TABLE>
  </TD>
 </TR>
</TABLE>