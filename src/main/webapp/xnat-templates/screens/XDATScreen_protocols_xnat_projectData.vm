<script type="text/javascript" src="$content.getURI("scripts/DynamicJSLoad.js")"></script>
<script type="text/javascript" src="$content.getURI("scripts/debugWindow.js")"></script>
<script type="text/javascript" src="$content.getURI("scripts/ajaxProtocolManager.js")"></script>

<div id="breadcrumb">
    <span class="crumb">
        <a href='$link.setAction("DisplayItemAction").addPathInfo("search_element","xnat:projectData").addPathInfo("search_field","xnat:projectData.ID").addPathInfo("search_value","$om.getId()")'>$displayManager.getSingularDisplayNameForProject().toUpperCase(): $!om.getDisplayName()</a>
    </span>
    <span class="crumb">
        Custom Variables
    </span>
</div>

<h2>Set Custom Variables For $displayManager.getSingularDisplayNameForProject()</h2>
<div class="info">
    This page allows you to add additional variables to existing data types in your $displayManager.getSingularDisplayNameForProject().toLowerCase().
    These 'custom' variables are grouped together in sets, and can be re-used by other $displayManager.getPluralDisplayNameForProject().toLowerCase(),
    allowing for inter-$displayManager.getSingularDisplayNameForProject().toLowerCase() standardization independent of the specified schema-model.
    (The default setting of 'project-specific' prevents the variables from being shared with other $displayManager.getPluralDisplayNameForProject().toLowerCase().)
</div>

#foreach($protocol in $om.getStudyprotocol())
    <p><strong>$protocol.getDataType(): </strong> $protocol.getDatatypeSchemaElement().getSingularDescription()</p>
    <p>$protocol</p>
#end


<script type="text/javascript">
    var protocols = [],
        createdProtocols = [];

    #foreach($protocol in $om.getStudyprotocol())
        // define the list of datatypes that have custom variables attached
        createdProtocols.push({ protocolID: "${om.getId()}_" + "$protocol.getDataType()", xsiType: "$protocol.getDataType()", dataTypeLabel: "$protocol.getDatatypeSchemaElement().getSingularDescription()"});
    #end

    createdProtocols.forEach(function(dataType){
        var protocolUrl = XNAT.url.csrfUrl('/data/projects/${om.getId()}/protocols/'+dataType.protocolID+'?dataType='+dataType.xsiType)
        XNAT.xhr.get(protocolUrl)
                .success(function(data){
                    var customVarXml = data;
                });
    });

    window.available_elements.forEach(function(dataType){
        // check other available data types and create placeholder tables for each of those
        if (!createdProtocols.contains(dataType.element_name)) {
        //    protocols.push( new ProtocolManager("${om.getId()}_" + dataType.element_name,null,null,{dataType:dataType.element_name,project:"${om.getId()}"}));
            createdProtocols.push(dataType.elementName)
        }

    });


//protocols[0].show();

function completePage(){
	  if(DEBUG2)writeConsole("completePage()<br>");
  var stopped =false;
  var groupManagers=window.groupManagers;
  for (var groupManagersCounter=0;groupManagersCounter<groupManagers.length;groupManagersCounter++){
				     var gm=groupManagers[groupManagersCounter];
				     gm.onSave.subscribe(function(o){
			        completePage();
		     },this,this);
     stopped = gm.save();
	     if(DEBUG2)writeConsole("completePage(): fg needs save<br>");
	     if(stopped)
     		   break;
  }

  if (!stopped){
   for (var protCounter=0;protCounter<protocols.length;protCounter++){
     var pm=protocols[protCounter];
     if (pm.protocol!=undefined && pm.protocol!=null && pm.canSave()){

		       pm.onSave.subscribe(function(o){
			          completePage();
		       },this,this);

	        if(DEBUG2)writeConsole("completePage(): pm needs save<br>");
        pm.save();
        stopped=true;
        break;
     }
   }
  }

	  if(DEBUG2)writeConsole("completePage(): stopped:" + stopped + "<br>");
  if(!stopped)
  	    location.href='$link.setAction("DisplayItemAction").addPathInfo("search_element","xnat:projectData").addPathInfo("search_field","xnat:projectData.ID").addPathInfo("search_value","$om.getId()")';
}

	function selectProtocol(SELECTbox){
	  if(SELECTbox.selectedIndex!=0)
	  {
     protocols[(SELECTbox.selectedIndex-1)].show();
	  }
	}

</script>
<TABLE width="100%">
 <TR>
  <TD align="center"><INPUT type="button" value="Done" ONCLICK="completePage();"/></TD>
 </TR>
</TABLE>
  </TD>
 </TR>
</TABLE>